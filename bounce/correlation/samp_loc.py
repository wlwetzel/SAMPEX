import numpy as np
from os import listdir
import sys
sys.path.append("/home/wyatt/Documents/SAMPEX")
import SAMP_Data as sp
import pandas as pd
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.graph_objects as go


def calc_stats():
    dir = "/home/wyatt/Documents/SAMPEX/OrbitData/"
    files = listdir(dir)
    files = [dir+file for file in files]
    MLT_bins = np.arange(25)
    L_bins = np.linspace(0,7,15)

    # Names of the columns in the orbit data file
    _col_names = ['Year', 'Day-of-year', 'Sec_of_day',
                  'Sec_of_day_psset', 'Flag_rstime',
                  'Orbit_Number', 'GEO_Radius', 'GEO_Long',
                  'GEO_Lat', 'Altitude', 'GEI_X', 'GEI_Y',
                  'GEI_Z', 'GEI_VX', 'GEI_VY', 'GEI_VZ',
                  'ECD_Radius', 'ECD_Long', 'ECD_Lat',
                  'ECD_MLT', 'L_Shell', 'B_Mag', 'MLT',
                  'Invariant_Lat', 'B_X', 'B_Y', 'B_Z',
                  'B_R', 'B_Theta', 'B_Phi', 'Declination',
                  'Dip', 'Magnetic_Radius', 'Magnetic_Lat',
                  'Loss_Cone_1', 'Loss_Cone_2',
                  'Dipole_Moment_X', 'Dipole_Moment_Y',
                  'Dipole_Moment_Z', 'Dipole_Disp_X',
                  'Dipole_Disp_Y', 'Dipole_Disp_Z',
                  'Mirror_Alt', 'Mirror_Long',
                  'Mirror_Lat', 'Equator_B_Mag',
                  'Equator_Alt', 'Equator_Long',
                  'Equator_Lat', 'North100km_B_Mag',
                  'North100km_Alt',
                  'North100km_Long', 'North100km_Lat',
                  'South100km_B_Mag', 'South100km_Alt',
                  'South100km_Long', 'South100km_Lat',
                  'Vertical_Cutoff', 'SAA_Flag',
                  'A11', 'A21', 'A31', 'A12', 'A22',
                  'A32', 'A13', 'A23', 'A33', 'Pitch',
                  'Zenith', 'Azimuth', 'Att_Flag']
    col_list = ["MLT","L_Shell"]
    mlt_tot = np.array([0]*(len(MLT_bins)-1))
    l_tot = np.array([0]*(len(L_bins)-1))
    hist = np.zeros(((len(L_bins)-1),(len(MLT_bins)-1)))
    id = 0
    for file in files:
        try:
            data = pd.read_csv(file, sep=' ', header=None,
                              skiprows=list(range(0, 60)) ,
                              names = _col_names,
                              usecols=col_list
                              )
            data  = data[data["L_Shell"]<7]

            H,edgex,edgey = np.histogram2d(data["L_Shell"],data["MLT"],
                                           bins=(L_bins,MLT_bins))
            hist+=H
            # L_hist,edges = np.histogram(data["L_Shell"],bins=L_bins)
            # MLT_hist,edges = np.histogram(data["MLT"],bins=MLT_bins)
            # #add to previous hist
            #
            # mlt_tot+=MLT_hist
            # l_tot+=L_hist
        except:
            "fuck"
        print(id/len(files) * 100)
        id+=1
    print(repr(hist/np.amax(hist)))
# calc_stats()
MLT_bins = np.arange(25)
L_bins = np.linspace(0,7,15)
MLT_bins_polar = MLT_bins * 360/24
def ret_hist():
    return [[1.35294197e-06, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00],
       [1.64855979e-02, 1.64125391e-02, 1.60729506e-02, 1.56237739e-02,
        1.57550093e-02, 1.51137148e-02, 1.58781270e-02, 1.60607742e-02,
        1.59728329e-02, 1.56765386e-02, 1.58618917e-02, 1.55831856e-02,
        1.59823035e-02, 1.59146564e-02, 1.62907743e-02, 1.59403623e-02,
        1.57996564e-02, 1.63543626e-02, 1.65545980e-02, 1.69523629e-02,
        1.60458918e-02, 1.53261267e-02, 1.50163030e-02, 1.54790091e-02],
       [9.95293115e-01, 9.93067525e-01, 9.78998282e-01, 9.52216795e-01,
        9.06881063e-01, 8.99576529e-01, 9.32701960e-01, 9.67230392e-01,
        9.90196582e-01, 9.98242528e-01, 9.83011108e-01, 9.81241460e-01,
        1.00000000e+00, 9.93524820e-01, 9.77094692e-01, 9.50670383e-01,
        9.07254475e-01, 8.95993939e-01, 9.33686902e-01, 9.68028628e-01,
        9.87632757e-01, 9.97418587e-01, 9.84332932e-01, 9.83747108e-01],
       [3.54420738e-01, 3.53672561e-01, 3.48551676e-01, 3.38293670e-01,
        3.26547427e-01, 3.22406072e-01, 3.34008902e-01, 3.45510262e-01,
        3.52400796e-01, 3.55343444e-01, 3.52283090e-01, 3.51396913e-01,
        3.53767267e-01, 3.54725150e-01, 3.47608675e-01, 3.37358787e-01,
        3.25071368e-01, 3.23155602e-01, 3.33101078e-01, 3.44548320e-01,
        3.53514267e-01, 3.54530326e-01, 3.52115325e-01, 3.53303208e-01],
       [2.15332891e-01, 2.13695832e-01, 2.10874948e-01, 2.05288650e-01,
        1.98273646e-01, 1.97476763e-01, 2.02781649e-01, 2.09067417e-01,
        2.13958302e-01, 2.15078538e-01, 2.13433361e-01, 2.13985361e-01,
        2.14802538e-01, 2.13974538e-01, 2.10777536e-01, 2.04606767e-01,
        1.97544410e-01, 1.98030116e-01, 2.02145766e-01, 2.09614006e-01,
        2.14089538e-01, 2.13943420e-01, 2.14753832e-01, 2.14139597e-01],
       [1.48366323e-01, 1.47309675e-01, 1.45634733e-01, 1.41938495e-01,
        1.37676728e-01, 1.37576610e-01, 1.40526024e-01, 1.44207379e-01,
        1.47324557e-01, 1.48923735e-01, 1.47423322e-01, 1.47726381e-01,
        1.48714029e-01, 1.47497734e-01, 1.44772909e-01, 1.41336436e-01,
        1.37799846e-01, 1.37546846e-01, 1.39716965e-01, 1.45059732e-01,
        1.48118734e-01, 1.46852381e-01, 1.48630146e-01, 1.48850676e-01],
       [1.10892536e-01, 1.09873771e-01, 1.09227064e-01, 1.06262768e-01,
        1.03790943e-01, 1.04126473e-01, 1.05390121e-01, 1.07822710e-01,
        1.10511006e-01, 1.11183418e-01, 1.10842477e-01, 1.10295888e-01,
        1.11445889e-01, 1.10731536e-01, 1.07889005e-01, 1.05522709e-01,
        1.04418708e-01, 1.03703002e-01, 1.05242650e-01, 1.08303005e-01,
        1.11052183e-01, 1.09984712e-01, 1.10985889e-01, 1.12277948e-01],
       [8.71646395e-02, 8.64164626e-02, 8.65071097e-02, 8.36564610e-02,
        8.25132250e-02, 8.28514605e-02, 8.30449312e-02, 8.55316385e-02,
        8.63217567e-02, 8.76246398e-02, 8.78681693e-02, 8.69008158e-02,
        8.80048165e-02, 8.74690515e-02, 8.50107559e-02, 8.33304020e-02,
        8.26390486e-02, 8.23441073e-02, 8.37403434e-02, 8.54193444e-02,
        8.72444631e-02, 8.71294630e-02, 8.74041102e-02, 8.88531111e-02],
       [7.16342186e-02, 7.09956300e-02, 7.06276298e-02, 6.89513347e-02,
        6.82437460e-02, 6.82018048e-02, 6.88228052e-02, 7.03272767e-02,
        7.06438651e-02, 7.19129247e-02, 7.21415718e-02, 7.16937481e-02,
        7.20576894e-02, 7.14015126e-02, 7.00012176e-02, 6.87050992e-02,
        6.81598636e-02, 6.77363928e-02, 6.89851582e-02, 7.04666297e-02,
        7.11133359e-02, 7.16112186e-02, 7.22078660e-02, 7.26083368e-02],
       [6.06429180e-02, 6.02397413e-02, 5.90220935e-02, 5.86189168e-02,
        5.80926224e-02, 5.76245045e-02, 5.83713285e-02, 5.97039763e-02,
        5.95199762e-02, 6.08390946e-02, 6.08160946e-02, 6.07078592e-02,
        6.09216241e-02, 6.01139177e-02, 5.91655054e-02, 5.86067404e-02,
        5.77232692e-02, 5.75311515e-02, 5.84132697e-02, 5.99109764e-02,
        6.02911531e-02, 6.05942121e-02, 6.10948006e-02, 6.13248008e-02],
       [5.29162664e-02, 5.20368541e-02, 5.14117949e-02, 5.09098535e-02,
        5.08300299e-02, 5.04701473e-02, 5.08543829e-02, 5.17540893e-02,
        5.18109128e-02, 5.24170308e-02, 5.28296781e-02, 5.28621487e-02,
        5.25915603e-02, 5.20936777e-02, 5.12507949e-02, 5.08665593e-02,
        5.02347354e-02, 5.03226767e-02, 5.08516770e-02, 5.16729127e-02,
        5.25157956e-02, 5.28472664e-02, 5.27173840e-02, 5.29040899e-02],
       [4.64221450e-02, 4.62963214e-02, 4.60514389e-02, 4.55616739e-02,
        4.51152030e-02, 4.53276149e-02, 4.51503795e-02, 4.58566152e-02,
        4.61447918e-02, 4.66886745e-02, 4.69497923e-02, 4.69741453e-02,
        4.65222627e-02, 4.60609094e-02, 4.58512034e-02, 4.49947912e-02,
        4.47999675e-02, 4.53235561e-02, 4.55062032e-02, 4.60933801e-02,
        4.67684981e-02, 4.67265569e-02, 4.70593806e-02, 4.70932042e-02],
       [4.24891426e-02, 4.25080838e-02, 4.21712013e-02, 4.18600246e-02,
        4.19330835e-02, 4.13689067e-02, 4.14243773e-02, 4.20778483e-02,
        4.21536130e-02, 4.26744957e-02, 4.26826133e-02, 4.27529663e-02,
        4.26785545e-02, 4.19831423e-02, 4.18870835e-02, 4.13188478e-02,
        4.15258480e-02, 4.16543774e-02, 4.20994954e-02, 4.23890249e-02,
        4.28625546e-02, 4.27340251e-02, 4.30276135e-02, 4.25080838e-02],
       [4.20332012e-02, 4.23227308e-02, 4.24363779e-02, 4.18140246e-02,
        4.18167305e-02, 4.10022594e-02, 4.12782596e-02, 4.16652010e-02,
        4.20480836e-02, 4.21441424e-02, 4.21766130e-02, 4.21089659e-02,
        4.19736717e-02, 4.16922598e-02, 4.13418478e-02, 4.10793771e-02,
        4.14812009e-02, 4.13580832e-02, 4.19276717e-02, 4.25500250e-02,
        4.25973780e-02, 4.26528486e-02, 4.22090837e-02, 4.22131425e-02]]
hist = ret_hist()
LL,MM = np.meshgrid(.5*(L_bins[:-1]+L_bins[1:]),
                    .5*(MLT_bins_polar[:-1]+MLT_bins_polar[1:]))
#make a dataframe
df = pd.DataFrame(data={"L":LL.flatten(),"MLT":MM.flatten(),"freq":np.array(np.transpose(hist)).flatten()})
df = df[df["L"]>2]
df["freq"] = np.log(df["freq"])
fig = px.bar_polar(df, r="L", theta="MLT",
                   color="freq",)
fig.update_layout(polar_bargap=0)
fig.update_layout(
    title_text="SAMPEX Location in MLT and L,L>2",
    polar = dict(
      angularaxis = dict(
          rotation=0,
          direction="counterclockwise",
          tickmode = "array",
          tickvals = [int(mlt*360/24.0) for mlt in range(0,24,4)],
          ticktext = ["0","4","8","12","16","20"]
        )))
fig.show()
